// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              Int               @id @default(autoincrement())
  googleId        String?           @unique
  fullName        String
  profileURL      String?
  email           String            @unique
  fbId            String?           @unique
  instaId         String?           @unique
  twitterId       String?           @unique
  snapchatId      String?           @unique
  notifications   Notifications[]
  eventGallery    EventPhotos[]
  userEvents      UserEvents[]
  artistFollowing ArtistFollowing[]
  comments        Comments[]
}

model UserEvents {
  id         Int    @id @default(autoincrement())
  user       Users  @relation(fields: [userId], references: [id])
  userId     Int
  eventAPIid String
}

// artistFollowing Model
model ArtistFollowing {
  id         Int    @id @default(autoincrement())
  user       Users  @relation(fields: [userId], references: [id])
  userId     Int
  artistName String
  bio        String
  ticketId   String
  youtube    String
  twitter    String
  facebook   String
  instagram  String
  itunes     String
  wiki       String
  homepage   String
  image      String
}

// Notifications Model
model Notifications {
  id         Int        @id @default(autoincrement())
  user       Users      @relation(fields: [userId], references: [id])
  userId     Int
  commentId  Comments[]
  created_at DateTime
}

model EventPhotos {
  id          Int      @id @default(autoincrement())
  user        Users    @relation(fields: [userId], references: [id])
  userId      Int
  photoUrl    String
  eventAPIid  String
  deleteToken String?
  created_at  DateTime @default(now())
  comments    Comments? @relation(fields: [commentsId], references: [id])
  commentsId  Int?
}

model Comments {
  id              Int           @id @default(autoincrement())
  user            Users         @relation(fields: [userId], references: [id])
  userId          Int
  photoId         EventPhotos[]
  comment         String
  notifications   Notifications @relation(fields: [notificationsId], references: [id])
  notificationsId Int
  created_at      DateTime
}

// //MODELS

// // POI Model
// model Points {
//   id Int @id @default(autoincrement())
//   photo String
//   title String @unique
//   description String
//   address String
//   date DateTime
//   totalBudget Int
//   currentFunds Int
//   tags Tags[]
//   tagsId Int
//   trips PoiTrips[]
//   votes PoiVotes[]
//   users PoiUsers[]
// }

// model Trips {
//   id Int @id @default(autoincrement())
//   photo String
//   title String @unique
//   description String
//   address String
//   startDate DateTime
//   endDate DateTime
//   totalBudget Int
//   currentFunds Int
//   owner Users @relation(fields: [ownerId], references: [id])
//   ownerId Int
//   attendees TripsUsers[]
//   poi PoiTrips[]
//   status String
// }

// // RELATION TABLES ------------------
// // ✔️POI TRIPS
// model PoiTrips {
//   trips Trips @relation(fields: [tripsId], references: [id])
//   tripsId Int
//   poi Points @relation(fields: [poiId], references: [id])
//   poiId Int

//   @@id([tripsId, poiId])
// }

// // ✔️POI Votes Join
// model PoiVotes {
//   users Users @relation(fields: [usersId], references: [id])
//   usersId Int
//   poi Points @relation(fields: [poiId], references: [id])
//   poiId Int
//   votes Int

//   @@id([poiId, usersId])
// }

// // ✔️ POI Users Join
// model PoiUsers {
//   users Users @relation(fields: [usersId], references: [id])
//   usersId Int
//   poi Points @relation(fields: [poiId], references: [id])
//   poiId Int

//   @@id([usersId, poiId])
// }

// // ✔️Users Trips Join
// model TripsUsers {
//   users Users @relation(fields: [usersId], references: [id])
//   usersId Int
//   trips Trips @relation(fields: [tripsId], references: [id])
//   tripsId Int
//   contributions Int

//   @@id([usersId, tripsId])
// }

// // Friends Join Table
// model FriendsJoin {
//   sendee Users @relation("sendee", fields: [usersId], references: [id])
//   usersId Int
//   friends Users @relation("friends", fields: [friendId], references: [id])
//   friendId Int
//   status String

//   @@id([usersId, friendId])
// }

//NOTES:
//https://www.prisma.io/docs/concepts/components/prisma-schema/relations/many-to-many-relations
//
