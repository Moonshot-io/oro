// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Messages {
  id         Int      @id @default(autoincrement())
  text       String
  sender     Users    @relation(name: "sentMessages", fields: [senderId], references: [id])
  receiver   Users    @relation(name: "receivedMessages", fields: [receiverId], references: [id])
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
}

model UserEvents {
  id           Int            @id @default(autoincrement())
  user         Users          @relation(fields: [userId], references: [id])
  userId       String
  eventAPIid   String
  Budget       Budget?         @relation(fields: [budgetId], references: [id])
  budgetId     Int?
  EventBudgets EventBudgets[]
}

model Users {
  id               String            @id @unique
  sentMessages     Messages[]        @relation("sentMessages")
  receivedMessages Messages[]        @relation("receivedMessages")
  fullName         String
  profileURL       String?
  email            String            @unique
  fbId             String?           @unique
  instaId          String?           @unique
  twitterId        String?           @unique
  snapchatId       String?           @unique
  notifications    Notifications[]
  eventGallery     EventPhotos[]
  userEvents       UserEvents[]
  artistUsersJoin  ArtistUsersJoin[]
  comments         Comments[]
}

model ArtistUsersJoin {
  user     Users           @relation(fields: [userId], references: [id])
  userId   String
  artist   ArtistFollowing @relation(fields: [artistId], references: [id])
  artistId Int

  @@id([userId, artistId])
}

// artistFollowing Model
model ArtistFollowing {
  id         Int               @id @default(autoincrement())
  users      ArtistUsersJoin[]
  artistName String            @unique
  bio        String
  ticketId   String
  youtube    String
  twitter    String
  facebook   String
  instagram  String
  itunes     String
  wiki       String
  homepage   String
  image      String
}

// Notifications Model
model Notifications {
  id         Int      @id @default(autoincrement())
  user       Users    @relation(fields: [userId], references: [id])
  userId     String
  commentId  Int
  type       String
  read       Boolean  @default(false)
  created_at DateTime @default(now())
}

model EventPhotos {
  id          Int      @id @default(autoincrement())
  user        Users?   @relation(fields: [userId], references: [id])
  userId      String?
  photoUrl    String
  eventAPIid  String
  deleteToken String?
  caption     String?
  created_at  DateTime @default(now())
}

model Comments {
  id         Int      @id @default(autoincrement())
  user       Users    @relation(fields: [userId], references: [id])
  userId     String
  photoUrl   String
  comment    String
  edited     Boolean  @default(false)
  created_at DateTime @default(now())
}

model Budget {
  id           Int            @id @default(autoincrement())
  Tickets      Int
  Food         Int
  Drinks       Int
  Parking      Int
  Merch        Int
  Travel       Int
  userEventId  Int
  UserEvents   UserEvents[]
  EventBudgets EventBudgets[]
}

model EventBudgets {
  event    UserEvents @relation(fields: [eventId], references: [id])
  eventId  Int
  budget   Budget     @relation(fields: [budgetId], references: [id])
  budgetId Int

  @@id([eventId, budgetId])
}

//NOTES:
//https://www.prisma.io/docs/concepts/components/prisma-schema/relations/many-to-many-relations
